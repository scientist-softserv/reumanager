.container
  .row.mb-3
    .col
      %h3 Application Information
    -# - if @application.completed?
    .col.d-flex.justify-content-end
      - btn_class = @application.accepted? ? 'btn-success' : 'btn-outline-success'
      = link_to'Accept Applicant', accept_reu_program_application_path, method: :patch, class: "btn #{btn_class}"
      - btn_class = @application.rejected? ? 'btn-danger' : 'btn-outline-danger'
      =link_to 'Reject Applicant', reject_reu_program_application_path, method: :patch, class: "btn #{btn_class} ml-2"
  - @application.state ||= 'started'
  .card.text-white.mb-3(class="bg-#{status_class(@application.state)}")
    .card-header
      .col.mb-3
        %h5 Current Status: #{@application.state.titlecase}
      .col
        = simple_form_for @application, url: change_state_reu_program_application_path, html: { class: "input-group"} do |f|
          = f.select :state, Application.states.map, class: 'form-control'
          = f.submit 'Change Application State', class: 'btn btn-light ml-2'
    .card-body
      - case @application.state
      - when 'started'
        %p.m-0 User has started their application
      - when 'submitted'
        %p.m-0 User has submitted their application but their recommendations have not yet come in
      - when 'completed'
        %p.m-0 User has completed their application and can now be accepted or rejected
      - when 'withdrawn'
        %p.m-0 User has withdrawn their application
      - when 'accepted'
        %p.m-0 This application has been accepted
      - when 'rejected'
        %p.m-0 This application has been rejected


  - if @application.data&.empty?
    .alert.alert-warning.w-100
      %p Applicant has not provided any information
  - else
    - @application.data.each do |key, value|
      .card.mb-2
        .card-body
          %h5.card-title= key.capitalize
          - case value
          - when Array
            - value.each_with_index do |item, index|
              - item.each do |k, v|
                - path = "#{key}--#{index}--#{k}"
                %p.mb-0(data-obj-path="#{path}")
                  %strong #{format_key(k)}:
                  = format_value(v, 'application', @application.id, path)
              %hr

          - when Hash
            - value.each do |k, v|
              - path = "#{key}--#{k}"
              %p.mb-0(data-obj-path="#{path}")
                %strong #{format_key(k)}:
                = format_value(v, 'application', @application.id, path)

  %h3 Recommenders
  - info = @application.recommender_info.fetch('recommenders_form', {})
  - if info.empty?
    .alert.alert-warning.w-100
      %p User has not entered their recommenders information
  - else
    - info.each_with_index do |r, index|
      - recommendation = @application.recommendations.detect { |s| s.email == r['email'] }
      :ruby
        classes = if recommendation&.submitted_at.present?
                    'border-success'
                  elsif recommendation&.last_sent_at.blank?
                    'border-warning'
                  else
                    'border-dark'
                  end
      .card.mb-2.mr-2(class="#{classes}")
        .card-header Recommender #{index + 1}
        .card-body
          - if recommendation.present?
            - if recommendation&.submitted_at.present?
              .alert.alert-success.p-2
                %p.m-0 Recommender submitted a recommendation.
            - else
              .alert.alert-warning.p-2
                %p.m-0 Recommender has not yet submitted a recommendation.

          - r.each do |key, value|
            - path = "recommenders_form--#{index}--#{key}"
            %p.mb-0(data-obj-path="#{path}")
              %strong #{format_key(key)}:
              = format_value(value, 'recommender', @application.id, path)
          - if recommendation.present?
            %hr
            %h3 Recommender's Response
            - recommendation.data.fetch('recommendation_form', {}).each do |key, value|
              - path = "recommendation_form--#{key}"
              %p.mb-0(data-obj-path="#{path}")
                %strong #{format_key(key)}:
                = format_value(value, 'recommendation', recommendation.id, path)
